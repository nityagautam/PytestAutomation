import os.path
from datetime import datetime
import pytest
from src.utilities.Logger import Logger
from src.utilities.WDF import WebDriverFactory
from src.utilities.SD import SeleniumDriver
from src.config.config import Config


# Get the config
config = Config()
# get the logger first
log = Logger(config).get_logger()


@pytest.fixture()
def setup():
    log.debug(f"Running method level setup")
    yield
    log.debug("Running method level teardown")


@pytest.fixture(scope="class")
def get_logger(request):
    log.debug("Running class level fixture get_logger")
    if request.cls is not None:
        request.cls.log = log
    yield log
    log.debug("Running class teardown for get logger")


@pytest.fixture(scope="class")
def get_config(request):
    log.debug("Running class level fixture get_logger")
    if request.cls is not None:
        request.cls.config = config
    yield config
    log.debug("Running class teardown for get logger")


@pytest.fixture(scope="class")
def get_web_driver(request):
    log.debug("Running class level fixture get_web_driver")
    wdf = WebDriverFactory(config_obj=config)
    driver = wdf.get_web_driver_instance()

    if request.cls is not None:
        request.cls.driver = driver

    yield driver

    driver.quit()
    log.debug("Running class teardown")
    log.debug(f"Exiting now ...\n")


# =================================================================
# Generate the screenshot for each function
# =================================================================
@pytest.fixture(scope='function', autouse=True)
def take_screenshot(request):
    # Fixture to run after each function to take screenshots.
    yield
    # Function call to take screenshot.
    screenshot_path = config.SCREENSHOT_LOC
    screenshot_file = f"{request.node.nodeid}_{datetime.now().strftime('%d-%m-%Y_%I-%M-%S_%p')}.png"
    SeleniumDriver(request.cls.driver).take_screenshot(sc_path=os.path.join(screenshot_path, screenshot_file))


# =================================================================
# Report Title for HTML report generated by 'Pytest-html' plugin
# =================================================================
def pytest_html_report_title(report):
    # Fetching the report title from the 'Config.py' for pytest-html report
    report.title = config.APP_REPORT_TITLE
    # [DEBUG]
    # print(report, report.__dir__())
    # print(f"RESULT: {report.results}, ERROR: {report.errors}, FAILED: {report.failed}, PASSED: {report.passed}")


# =========================================================================
# DO NOT TOUCH IF NOT SURE;
# Incase, I want to make sure about all the resources and pre-requisite,
# Then we can write things inside the following function to make sure,
# otherwise, exit the entire execution
# =========================================================================
@pytest.fixture(scope="session", autouse=True)
def sanity_check(request):
    log.info("Initiating sanity check now ...")
    log.info("=" * 35 + "[SANITY CHECK]" + "=" * 35)
    pass_str = '[PASS]'
    fail_str = '[** FAIL **]'
    fmt_str = "%-70s %s"

    # CHECK FOR DRIVER LOCATION under ./resources/drivers/
    log.info(fmt_str % ("DRIVERS IN PATH", pass_str))
    # CHECK FOR BROWSERS IN PATH
    log.info(fmt_str % ("BROWSERS IN PATH", pass_str))
    # CHECK FOR APPLICATION URL STATUS
    log.info(fmt_str % ("APPLICATION URL IS LIVE", pass_str))

    good_condition = True   # Just hard-coding; assuming condition is always good
    if not good_condition:
        log.debug(f"Exiting now ...\n\n")
        pytest.exit("Write your Error message here, bcz condition is not good enough")


# =========================================================================
# DO NOT TOUCH IF NOT SURE;
# Loading configuration from the external test_data.json file
# Default location of test_data.json is "./resources/test_data/test_data.json"
# =========================================================================
@pytest.fixture(scope="session", autouse=False)
def get_config(request):

    # Log
    if config.TEST_DATA is None:
        log.debug(f"Default config values are going to be used...")
        log.debug(f"[From Session] Config value: ")
        log.debug(f" URL : {config.ENV_URL}")
        log.debug(f" ENV TYPE : {config.ENV_TYPE}")
        log.debug(f" FROM CONFIG.TEST_DATA: {config.TEST_DATA}")

    # send/yield config object to the session, and we can this object directly
    yield config

    # Clean-up goes here (if needed)
    # pass
